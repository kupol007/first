git config --list

rem user.name=kupol007
rem user.email=kupol007@mail.ru
rem  https://github.com/kupol007/

rem git help <глагол>
rem git <глагол> --help 
rem  man git-<rnarcm>

git clone https://github.com/kupol007/first
rem клонируем
git status
rem проверяем статус
git add book.pdf
rem добавили книгу в индекс
git diff
rem проссмотр изменений
rem Если вы хотите посмотреть, что вы проиндексировали и что войдёт в следующий коммит, вы можете выполнить git diff --staged. Эта команда сравнивает ваши индексированные изменения с последним коммитом:
git commit
rem Для того чтобы удалить файл из Git, вам необходимо удалить его из отслеживаемых файлов (точнее, удалить его из вашего индекса) а затем выполнить коммит. Это позволяет сделать команда git гт, которая также удаляет файл из вашего рабочего каталога, так что вы в следующий раз не увидите его как “неотслеживаемый”.
rem git mv file_from file_to 
rem   переиименовать
git log
rem Одним из самых полезных аргументов является -р, который показывает разницу, внесенную в каждый коммит. Так же вы можете использовать аргумент -2, который позволяет установить лимит на вывод количества коммитов. В данном случае их будет только два:
rem Например, если вы хотите увидеть сокращенную статистику для каждого коммита, вы можете использовать опцию --stat:
rem Следующей действительно полезной опцией является --pretty. Эта опция меняет формат вывода. Существует несколько встроенных вариантов отображения. Например, опция oneline печатает каждый коммит в одну строку, что может быть очень удобным если вы просматриваете большое количество коммитов. К тому же, опции short, full и fuller делают вывод приблизительно в том же формате, но с меньшим или большим количеством информации соответственно:
rem Опции oneline и format являются особенно полезными с опцией - -graph команды log. С этой опцией вы сможете увидеть небольшой граф в формате ASCII, который показывает текущую ветку и историю слияний:
git add tab3.png
git commit --amend
rem Отмена может потребоваться, если вы сделали коммит слишком рано, например, забыв добавить какие-то файлы или комментарий к коммиту. Если вы хотите переделать коммит, можно запустить commit с параметром -amend (дополнить):
rem Хотя git reset может стать опасной командой, если ее вызвать с --hard, в приведенном примере файл в вашем рабочем каталоге не затрагивается. Вызов git reset без параметра не опасен — он затрагивает только область подготовки.
rem Важно понимать, что git checkout -- [file] — опасная команда. Любые изменения соответствующего файла пропадают — вы просто копируете поверх него другой файл. Ни в коем случае не используйте эту команду, если вы не убеждены, что файл вам не нужен.git
cd..
cd first
git remote -v
rem Вы можете также указать ключ -v, чтобы просмотреть адреса для чтения и записипривязанные к репозиторию
git remote add pb https://github.com/kupol007/-
git remote -v
git fetch pb
rem Как вы только что узнали, для получения данных из удалённых проектов, следует выполнить: git fetch [remote-name]
git push origin master
REM Everything up-to-date ВСЕ СОВРЕМЕННО
git remote show origin
rem git remote rename pb paul Для переименования ссылок в новых версиях Git’a можно вылолнить git remote rename, это изменит сокращённое имя, используемое для удалённого репозитория. Например, если вы хотите переименовать pb в paul, вы можете это сделать при помощи git remote rename:
rem git remote
git remote rename pb paul 
git remote
git remote rm paul
rem Если по какой-то причине вы хотите удалить ссылку (вы сменили сервер или больше не используете определённое зеркало, или, возможно, контрибьютор перестал быть активным), вы можете использовать git remote rm:
git tag -a v1.4 
git push origin v1.4
rem Если у вас есть много меток, которые хотелось бы отправить все за один раз, можно использовать опцию --tags для команды git push. В таком случае все ваши метки отправятся на удалённый сервер (если только их уже там нет).
git push origin --tags
rem Git не будет пытаться сделать вывод о том, какую команду вы хотели ввести, если вы ввели её неполностью. Если вы не хотите печатать каждую команду для Git’а целиком, вы легко можете настроить псевдонимы (alias) для любой команды с помощью git config
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.unstage "reset HEAD --"
git config --global alias.last "log -1 HEAD"
rem Можно сказать, что Git просто заменяет эти команды на созданные вами псевдонимы (alias). Однако, возможно, вы захотите выполнить внешнюю команду, а не подкоманду Git’а. В этом случае, следует начать команду с символа !. Это полезно, если вы пишете свои утилиты для работы с Git-репозиторием. Продемонстрируем этот случай на примере создания псевдонима git visual для запуска gitk: 
git config --global alias.visual "!gitk"
git branch testing
rem В результате создается новый указатель на тот же самый коммит, в котором вы находитесь.
git log --oneline --decorate
rem Чтобы переключиться на существующую ветку, выполните команду git checkout. Давайте переключимся на ветку “testing”:
git checkout testing
git commit -a -m "made a change"
git checkout master
git checkout -b iss53
vim index.html
git commit -a -m "added a new footer [issue 53]"
git checkout master
git checkout -b hotfix
git commit -a -m "fixed the broken email address"
git checkout master
git merge hotfix
git branch -d hotfix
git checkout iss53
git commit -a -m "finished the new footer [issue 53]"
git checkout master
git merge iss53
git branch -d iss53
git st
git mergetool
rem Команда git branch делает несколько больше, чем просто создаёт и удаляет ветки. При запуске без параметров, вы получите простой список имеющихся у вас веток:
git branch
rem Чтобы посмотреть последний коммит на каждой из веток, выполните команду git branch -v
git branch -v
rem Ещё одна полезная возможность для выяснения состояния веток состоит в том, чтобы оставить в этом списке только те ветки, которые вы слили (или не слили) в ветку, на которой сейчас находитесь. Для этих целей в Git’е есть опции --merged и --no-merged. Чтобы посмотреть те ветки, которые вы уже слили с текущей, можете выполнить команду git branch --merged:
git branch --merged
git branch -d testing
rem Если вы не хотите каждый раз вводить ваши данные, когда вы отправляете изменения, вы можете установить “кэш учетных данных”. Проще всего просто держать их в памяти несколько минут, вы можете легко настроить с помощью команды git config --global credential.helper cache.
git push origin --delete serverfix

rem server
 git clone --bare my_project my_project.git
git remote add origin ftp://100.95.42.140/volume/git/ second

